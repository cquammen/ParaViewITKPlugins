/*=========================================================================

  Program:   Visualization Toolkit
  Module:    vtkNoiseImageFilter.h

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
// .NAME vtkNoiseImageFilter - peforms Gaussian blurring of an input image
// .SECTION Description
// vtkMyImageShiftFilter is a filter to generate scalar values from a
// dataset.  The scalar values lie within a user specified range, and
// are generated by computing a projection of each dataset point onto
// a line. The line can be oriented arbitrarily. A typical example is
// to generate scalars based on elevation or height above a plane.

#ifndef __vtkNoiseImageFilter_h
#define __vtkNoiseImageFilter_h

#include <vtkImageAlgorithm.h>

#include <itkVTKImageImport.h>
#include <itkVTKImageExport.h>
#include <itkAdditiveGaussianNoiseImageFilter.h>

class vtkImageExport;
class vtkImageImport;

class VTK_EXPORT vtkNoiseImageFilter : public vtkImageAlgorithm
{
public:

  //BTX
  typedef float
    PixelType;
  typedef itk::Image< PixelType, 3 >
    ITKImageType;
  typedef itk::VTKImageImport< ITKImageType >
    ITKImageImportType;
  typedef itk::VTKImageExport< ITKImageType >
    ITKImageExportType;
  typedef itk::AdditiveGaussianNoiseImageFilter< ITKImageType, ITKImageType >
    ITKNoiseFilterType;
  //ETX

  static vtkNoiseImageFilter* New();
  vtkTypeMacro(vtkNoiseImageFilter, vtkImageAlgorithm);
  void PrintSelf(ostream& os, vtkIndent indent);

  // Set/get the mean for additive Gaussian noise.
  vtkSetMacro(Mean, double);
  vtkGetMacro(Mean, double);

  // Set/get the standard deviation for additive Gaussian noise.
  vtkSetMacro(StandardDeviation, double);
  vtkGetMacro(StandardDeviation, double);

protected:
  vtkNoiseImageFilter();
  ~vtkNoiseImageFilter();

  double Mean;
  double StandardDeviation;

  vtkImageExport*                VTKExporter;
  //BTX
  ITKImageImportType::Pointer ITKImporter;
  ITKNoiseFilterType::Pointer NoiseFilter;
  ITKImageExportType::Pointer ITKExporter;
  //ETX
  vtkImageImport*                VTKImporter;

protected:
  void InitializeITKImporter();
  void InitializeITKExporter();

  int RequestData(vtkInformation *request, vtkInformationVector **inputVector, vtkInformationVector *outputVector);

  //BTX
  template <class T>
  void RunITKPipeline(const T *input);
  //ETX

private:
  vtkNoiseImageFilter(const vtkNoiseImageFilter&);  // Not implemented.
  void operator=(const vtkNoiseImageFilter&);  // Not implemented.
};

#endif
