/*=========================================================================

  Program:   Visualization Toolkit
  Module:    vtkNoiseImageFilter.h

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
// .NAME vtkNoiseImageFilter - peforms Gaussian blurring of an input image
// .SECTION Description
// vtkMyImageShiftFilter is a filter to generate scalar values from a
// dataset.  The scalar values lie within a user specified range, and
// are generated by computing a projection of each dataset point onto
// a line. The line can be oriented arbitrarily. A typical example is
// to generate scalars based on elevation or height above a plane.

#ifndef __vtkNoiseImageFilter_h
#define __vtkNoiseImageFilter_h

#include <vtkITKImageFilter.h>

#include <itkAdditiveGaussianNoiseImageFilter.h>
#include <itkShotNoiseImageFilter.h>

class VTK_EXPORT vtkNoiseImageFilter : public vtkITKImageFilter
{
public:

  static vtkNoiseImageFilter* New();
  vtkTypeMacro(vtkNoiseImageFilter, vtkITKImageFilter);
  void PrintSelf(ostream& os, vtkIndent indent);

  //BTX
  typedef Superclass::PixelType             PixelType;
  typedef Superclass::ITKImageType          ITKImageType;
  typedef Superclass::ITKInternalFilterType ITKInternalFilterType;
  typedef Superclass::ITKImageImportType    ITKImageImportType;
  typedef Superclass::ITKImageExportType    ITKImageExportType;
  typedef itk::AdditiveGaussianNoiseImageFilter< ITKImageType, ITKImageType >
    ITKGaussianNoiseFilterType;
  typedef itk::ShotNoiseImageFilter< ITKImageType, ITKImageType >
    ITKPoissonNoiseFilterType;

  enum {
    GAUSSIAN_NOISE = 0,
    POISSON_NOISE  = 1
  };
  //ETX

  // Set/get the noise type
  vtkSetMacro(NoiseType, int);
  vtkGetMacro(NoiseType, int);

  // Set/get the mean for additive Gaussian noise.
  vtkSetMacro(Mean, double);
  vtkGetMacro(Mean, double);

  // Set/get the standard deviation for additive Gaussian noise.
  vtkSetMacro(StandardDeviation, double);
  vtkGetMacro(StandardDeviation, double);

protected:
  vtkNoiseImageFilter();
  ~vtkNoiseImageFilter();

  int NoiseType;

  double Mean;
  double StandardDeviation;

  ITKGaussianNoiseFilterType::Pointer GaussianNoiseFilter;
  ITKPoissonNoiseFilterType::Pointer  PoissonNoiseFilter;

protected:
  int UpdateInternalFilters();

private:
  vtkNoiseImageFilter(const vtkNoiseImageFilter&);  // Not implemented.
  void operator=(const vtkNoiseImageFilter&);  // Not implemented.
};

#endif
