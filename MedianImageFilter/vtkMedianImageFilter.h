/*=========================================================================

  Program:   Visualization Toolkit
  Module:    vtkMedianImageFilter.h

  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen
  All rights reserved.
  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
// .NAME vtkMedianImageFilter - peforms Gaussian blurring of an input image
// .SECTION Description
// vtkMyImageShiftFilter is a filter to generate scalar values from a
// dataset.  The scalar values lie within a user specified range, and
// are generated by computing a projection of each dataset point onto
// a line. The line can be oriented arbitrarily. A typical example is
// to generate scalars based on elevation or height above a plane.

#ifndef __vtkMedianImageFilter_h
#define __vtkMedianImageFilter_h

#include <vtkImageAlgorithm.h>

#include <itkVTKImageImport.h>
#include <itkVTKImageExport.h>
#include <itkMedianImageFilter.h>

class vtkImageExport;
class vtkImageImport;

class VTK_EXPORT vtkMedianImageFilter : public vtkImageAlgorithm
{
public:

  //BTX
  typedef float
    PixelType;
  typedef itk::Image< PixelType, 3 >
    ITKImageType;
  typedef itk::VTKImageImport< ITKImageType >
    ITKImageImportType;
  typedef itk::VTKImageExport< ITKImageType >
    ITKImageExportType;
  typedef itk::MedianImageFilter< ITKImageType, ITKImageType >
    ITKMedianFilterType;
  //ETX

  static vtkMedianImageFilter* New();
  vtkTypeMacro(vtkMedianImageFilter, vtkImageAlgorithm);
  void PrintSelf(ostream& os, vtkIndent indent);

  //void SetStandardDeviation(double sigma0, double sigma1, double sigma2);
  //void SetStandardDeviation(double sigma[3]);

  vtkSetVector3Macro(NeighborhoodRadius, int);
  vtkGetVector3Macro(NeighborhoodRadius, int);


protected:
  vtkMedianImageFilter();
  ~vtkMedianImageFilter();

  int NeighborhoodRadius[3];

  vtkImageExport*                VTKExporter;
  //BTX
  ITKImageImportType::Pointer    ITKImporter;
  ITKMedianFilterType::Pointer   MedianFilter;
  ITKImageExportType::Pointer    ITKExporter;
  //ETX
  vtkImageImport*                VTKImporter;

protected:
  void InitializeITKImporter();
  void InitializeITKExporter();

  int RequestData(vtkInformation *request, vtkInformationVector **inputVector, vtkInformationVector *outputVector);

  //BTX
  template <class T>
  void RunITKPipeline(const T *input);
  //ETX

private:
  vtkMedianImageFilter(const vtkMedianImageFilter&);  // Not implemented.
  void operator=(const vtkMedianImageFilter&);  // Not implemented.
};

#endif
